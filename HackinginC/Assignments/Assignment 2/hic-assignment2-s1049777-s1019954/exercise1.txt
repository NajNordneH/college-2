                    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                               EXERCISE 1

                     Jan Hendron, Bernerd van Beek
                    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1 d)
════

  When inputing the array f into the sizeof() function, we are returned
  the value of tyhe size of the data type, which is short multiplied by
  the amount of elements in the array, which is 3, so the sizeof(f) = 6


2 e)
════

  0x7fffe0dd740f c 3 1 0x7fffe0dd7410
  0x7fffe0dd7410 d 4 1 0x7fffe0dd7411
  0x7fffe0dd7411 i 9 1 0x7fffe0dd7412
  0x7fffe0dd7412 b 2 2 0x7fffe0dd7414
  0x7fffe0dd7414 a 1 4 0x7fffe0dd7418
  0x7fffe0dd7418 e 5 8 0x7fffe0dd7420
  0x7fffe0dd7420 g 7 8 0x7fffe0dd7428
  0x7fffe0dd7428 h 8 8 0x7fffe0dd7430
  0x7fffe0dd7432 f 6 6 0x7fffe0dd7438


3 f)
════

  I think that the variables are not exactly in the order they were
  declared is mainly due to data padding, which is where the compiler
  will change the allignment of data for optimizations


4 g)
════

  There is a gap between variables h and f. This is due to the fact that
  h is an unsigned long int, which means that it has a size of 8 bytes,
  where as f is an array of 3 shorts, with a size of 6 bytes. This means
  that the jump between one unsigned long and another is 8 bytes, or 2
  memory addresses, and to ensure that there is enough space for this
  variable, another memory address is kept beside it, as well to protect
  against a buffer overflow.
